import "@assets/css/app.scss"

import React, { useEffect, useMemo, useState } from "react"
import { persistor, store } from "src/@config/redux/store"

import type { AppProps } from "next/app"
import Head from "next/head"
import Loading from "@shared/components/loading.component"
import { PersistGate } from "redux-persist/integration/react"
import { Provider } from "react-redux"
import { useRouter } from "next/router"

function MyApp({ Component, pageProps }: AppProps) {
	const router: any = useRouter()

	const [state, setState] = useState({
		isRouteChanging: false,
		loadingKey: 0,
	})

	const handleRouteChangeStart = useMemo(
		() => () => {
			setState((prevState) => ({
				...prevState,
				isRouteChanging: true,
				loadingKey: prevState.loadingKey ^ 1,
			}))
		},
		[state.isRouteChanging, state.loadingKey]
	)

	const handleRouteChangeEnd = useMemo(
		() => () => {
			setState((prevState) => ({
				...prevState,
				isRouteChanging: false,
			}))
		},
		[state.isRouteChanging, state.loadingKey]
	)
	useEffect(() => {
		router.events.on("routeChangeStart", handleRouteChangeStart)
		router.events.on("routeChangeComplete", handleRouteChangeEnd)
		router.events.on("routeChangeError", handleRouteChangeEnd)

		return () => {
			router.events.off("routeChangeStart", handleRouteChangeStart)
			router.events.off("routeChangeComplete", handleRouteChangeEnd)
			router.events.off("routeChangeError", handleRouteChangeEnd)
		}
	}, [router.events])

	return (
		<>
			<Head>
				<title>SSR with NextJS</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
				<link
					rel="stylesheet"
					type="text/css"
					href="https://fonts.googleapis.com/css?family=Droid+Serif:400,400i,700,700i"
				/>
				<link
					rel="stylesheet"
					type="text/css"
					href="https://fonts.googleapis.com/css?family=Montserrat:400,700"
				/>
				<link
					rel="stylesheet"
					type="text/css"
					href="https://fonts.googleapis.com/css?family=Playfair+Display:400,400i,700,700i"
				/>
			</Head>

			<Provider store={store}>
				<PersistGate persistor={persistor}>
					<Loading
						isRouteChanging={state.isRouteChanging}
						key={state.loadingKey}
					/>

					<Component {...pageProps} />
				</PersistGate>
			</Provider>
		</>
	)
}
export default MyApp
